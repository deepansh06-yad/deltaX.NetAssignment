// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieInformationRepository.RecordModels;

namespace MovieInformationRepository.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ActorsMovies", b =>
                {
                    b.Property<long>("ActorsListActorId")
                        .HasColumnType("bigint");

                    b.Property<long>("MoviesListMovieId")
                        .HasColumnType("bigint");

                    b.HasKey("ActorsListActorId", "MoviesListMovieId");

                    b.HasIndex("MoviesListMovieId");

                    b.ToTable("ActorsMovies");
                });

            modelBuilder.Entity("MovieInformationRepository.RecordModels.Actors", b =>
                {
                    b.Property<long>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActorId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("MovieInformationRepository.RecordModels.Movies", b =>
                {
                    b.Property<long>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActorId")
                        .HasColumnType("bigint");

                    b.Property<string>("ActorIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProducerId1")
                        .HasColumnType("bigint");

                    b.Property<string>("ProducerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MovieId");

                    b.HasIndex("ProducerId1");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieInformationRepository.RecordModels.Producers", b =>
                {
                    b.Property<long>("ProducerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MovieId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProduceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionHouseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProducerId");

                    b.HasIndex("MovieId1");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("ActorsMovies", b =>
                {
                    b.HasOne("MovieInformationRepository.RecordModels.Actors", null)
                        .WithMany()
                        .HasForeignKey("ActorsListActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieInformationRepository.RecordModels.Movies", null)
                        .WithMany()
                        .HasForeignKey("MoviesListMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieInformationRepository.RecordModels.Movies", b =>
                {
                    b.HasOne("MovieInformationRepository.RecordModels.Producers", "ProducerId")
                        .WithMany("MoviesList")
                        .HasForeignKey("ProducerId1");

                    b.Navigation("ProducerId");
                });

            modelBuilder.Entity("MovieInformationRepository.RecordModels.Producers", b =>
                {
                    b.HasOne("MovieInformationRepository.RecordModels.Movies", "MovieId")
                        .WithMany()
                        .HasForeignKey("MovieId1");

                    b.Navigation("MovieId");
                });

            modelBuilder.Entity("MovieInformationRepository.RecordModels.Producers", b =>
                {
                    b.Navigation("MoviesList");
                });
#pragma warning restore 612, 618
        }
    }
}
